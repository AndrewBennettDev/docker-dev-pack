---
services:
  postgres:
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"

  zookeeper: # is this necessary? Can I use KRaft?
    image: confluentinc/cp-zookeeper:5.3.3
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    healthcheck:
      test: echo ruok | nc zookeeper 2181 || exit -1
      interval: 15s
      timeout: 10s
      retries: 15
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=ruok"

  kafka:
    image: confluentinc/cp-kafka:7.5.1.arm64
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    healthcheck:
      test: [ "CMD", "nc", "-vz", "kafka", "9092" ]
      interval: 5s
      timeout: 10s
      retries: 25
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO

  schema-registry:
    image: confluentinc/cp-schema-registry:5.3.3
    hostname: schema-registry
    container_name: schema-registry
    healthcheck:
      test: [ "CMD", "curl", "--output", "/dev/null", "--silent", "--head", "--fail", "http://schema-registry:8081/subjects" ]
      interval: 5s
      timeout: 10s
      retries: 30
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181

  kafka-rest:
    image: confluentinc/cp-kafka-rest:5.3.3
    hostname: kafka-rest
    container_name: kafka-rest
    ports:
      - "8082:8082"
    depends_on:
      schema-registry:
        condition: service_healthy
    environment:
      KAFKA_REST__LOG4J_ROOT_LOGLEVEL: DEBUG
      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_REST_HOST_NAME: kafka-rest
      KAFKA_REST_LISTENERS: http://kafka-rest:8082

  mysql: # worth having this and something like maria?
    image: mysql:8
    platform: linux/x86_64
    container_name: mysql
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - "3306:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 5s
      timeout: 10s
      retries: 30
    environment:
      MYSQL_ROOT_PASSWORD: "b3ttercl0ud"
    volumes:
      - /Users/Shared/dkr-mysql:/var/lib/dkr-mysql     # Keeps data persisted between restarts in /Users/Shared/mysql
      - ./config/sql-data:/docker-entrypoint-initdb.d # initialize db with schemas

  redis:
    image: redis:latest
    container_name: redis
    command: [ "redis-server", "--appendonly", "yes" ]
    ports:
      - "6379:6379"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.8.8
    container_name: elasticsearch
    environment:
      - node.name=es01
      - cluster.name=docker-cluster
      - http.host=0.0.0.0
      - network.publish_host=127.0.0.1
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m -Djdk.lang.Process.launchMechanism=vfork"
      - cluster.routing.allocation.disk.threshold_enabled=false
      - action.auto_create_index=.watches,.triggered_watches,.watcher-history-*
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"

  bigtable: # I don't think this is free....
    image: google/cloud-sdk:latest
    container_name: bigtable
    command: gcloud beta emulators bigtable start --host-port=0.0.0.0:8086
    environment:
      - BIGTABLE_EMULATOR_HOST=bigtable:8086
    ports:
      - "8086:8086"

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command: "--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus"
    ports:
      - 9090:9090

  grafana:
    image: grafana/grafana:8.5.13
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    user: "104"
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards